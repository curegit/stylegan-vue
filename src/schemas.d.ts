/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Welcome
     * @description hello world message
     */
    get: operations["root"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/version": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Version */
    get: operations["version"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/models/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Model List */
    get: operations["model_list_models__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/{model_id}/generate": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Generate */
    post: operations["generate"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/{model_id}/blend": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Blend */
    post: operations["blend__model_id__blend_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/{model_id}/mix": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Mix */
    post: operations["mix"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Base64: string;
    /** CompoundImage */
    CompoundImage: {
      /** Model */
      model: string;
      /** Width */
      width: number;
      /** Height */
      height: number;
      /** Mimetype */
      mimeType: string;
      data: components["schemas"]["Base64"];
      /** Styles */
      styles: components["schemas"]["Base64"][];
    };
    /** DeserializationError */
    DeserializationError: {
      /** Detail */
      detail?: string | null;
    };
    /** EntityValidationError */
    EntityValidationError: {
      /** Detail */
      detail?: unknown;
    };
    /** GenerateRequestBody */
    GenerateRequestBody: {
      latent?: components["schemas"]["Base64"] | null;
    };
    /** HTTPError */
    HTTPError: {
      /** Detail */
      detail?: unknown;
    };
    /** HTTPNotFoundError */
    HTTPNotFoundError: {
      detail?: components["schemas"]["NotFoundError"] | null;
    };
    /** Model */
    Model: {
      /** Id */
      id: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Conditional */
      conditional: boolean;
      /** Labels */
      labels: string[] | null;
      /** Width */
      width: number;
      /** Height */
      height: number;
      /** Lossy */
      lossy: boolean;
      /** Mimetype */
      mimeType: string;
    };
    /** NotFoundError */
    NotFoundError: {
      /** Type */
      type: string;
      /** Name */
      name: string;
      /** Msg */
      msg: string;
    };
    /** ReconstructionRequestBody */
    ReconstructionRequestBody: {
      /** Styles */
      styles: components["schemas"]["Base64"][];
    };
    /** RequestLimitError */
    RequestLimitError: {
      /** Detail */
      detail?: string | null;
    };
    /** SimpleImage */
    SimpleImage: {
      /** Model */
      model: string;
      /** Width */
      width: number;
      /** Height */
      height: number;
      /** Mimetype */
      mimeType: string;
      data: components["schemas"]["Base64"];
      style: components["schemas"]["Base64"];
    };
    /** SimplePureImage */
    SimplePureImage: {
      /** Model */
      model: string;
      /** Width */
      width: number;
      /** Height */
      height: number;
      /** Mimetype */
      mimeType: string;
      data: components["schemas"]["Base64"];
      style: components["schemas"]["Base64"];
      /** Label */
      label: string | null;
      latent: components["schemas"]["Base64"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  root: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
    };
  };
  version: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
    };
  };
  model_list_models__get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Model"][];
        };
      };
    };
  };
  generate: {
    parameters: {
      query?: {
        label?: string | null;
        psi?: number;
        sd?: number;
      };
      header?: never;
      path: {
        model_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["GenerateRequestBody"] | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SimplePureImage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPNotFoundError"];
        };
      };
      /** @description Unsupported Media Type */
      415: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DeserializationError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EntityValidationError"];
        };
      };
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RequestLimitError"];
        };
      };
      /** @description Service Unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  blend__model_id__blend_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        model_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReconstructionRequestBody"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SimpleImage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPNotFoundError"];
        };
      };
      /** @description Unsupported Media Type */
      415: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DeserializationError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EntityValidationError"];
        };
      };
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RequestLimitError"];
        };
      };
      /** @description Service Unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  mix: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        model_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReconstructionRequestBody"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CompoundImage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPNotFoundError"];
        };
      };
      /** @description Unsupported Media Type */
      415: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DeserializationError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EntityValidationError"];
        };
      };
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RequestLimitError"];
        };
      };
      /** @description Service Unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
}
